"use strict";const Promise=require("bluebird"),express=require("express");var http=require("http"),app=express();const bodyParser=require("body-parser");var multer=require("multer"),multer_upload=null,PATH=require("path"),archiver=require("archiver"),extract=require("extract-zip"),my=require("./my"),fs=require("fs"),dgram=require("dgram").createSocket("udp4"),server=http.createServer((function(e,r){app(e,r)}));function init(){return my.init().then((()=>{multer_upload=multer({dest:my.config.tmp_dir}),init_web(),init_udp(),server.on("error",(function(e){my.log("warn",e)})),server.on("listening",(function(e){for(var r=0;r<process.argv.length;r++)if("show_start_popup"==process.argv[r]){my.alert("The program started properly","Info");break}})),server.listen(my.config.port,"0.0.0.0")})).catch((e=>{try{my.log("warn",e),"string"==typeof e&&(e+="\nSee more detailes in : "+PATH.resolve(my.get_logfile_name()))}catch(e){}my.alert(e)}))}function init_udp(){dgram.on("listening",(function(){var e=dgram.address();my.log("info","UDP Client listening on "+e.address+":"+e.port)})),dgram.on("message",(function(e,r){if(my.log("info","Message from: "+r.address+":"+r.port+" - "+e),"discover_devices"==e){var i=Buffer.from(JSON.stringify({result:"success",device_id:my.config.device_id,device_name:my.config.device_name}));dgram.send(i,0,i.length,r.port,r.address,(()=>{my.log("info","discover_devices sent back")}))}})),dgram.on("error",(function(e){e.message.indexOf("EADDRINUSE")&&my.alert("Port "+my.config.port_udp+" already in use.\nThe program may already be running.")}));try{dgram.bind(my.config.port_udp)}catch(e){my.alert(e,!0),process.exit()}}function init_web(){app.set("port",my.config.port),app.use(bodyParser.urlencoded({extended:!0})),app.use(bodyParser.json()),app.get("/api/:api",(function(e,r){var i;if("string"==typeof e.query.data)try{i=JSON.parse(e.query.data)}catch(e){i=null}else i=e.query.data;process_api(e,r,e.params.api,i)})),app.post("/api/:api",multer_upload.single("file"),(function(e,r,i){my.log("info","post : "+e.params.api);var t=e.file.originalname.split(".");if("zip"==t[t.length-1])return extract_zip(e.file.path).then((i=>"upload_route"==e.params.api?my.del(my.config.route_dir,!1).then((()=>fs.promises.mkdir(my.config.route_dir))).then((()=>my.copy_all(i.dir,my.config.route_dir))).then((()=>{r.send({result:"success"}),my.log("info","upload_route completed")})).finally((()=>my.del(i.dir,!1))):Promise.reject("Invalid api name : "+e.params.api))).catch((i=>{api_error(e,r,i)})).finally((()=>{fs.promises.unlink(e.file.path)}));api_error(e,r,"post : Invalid file ext:"+e.file.originalname)}))}function api_error(e,r,i){var t=i&&"string"==typeof i?i:"Unknown error";r.send({result:"fail",msg:t}),i&&console.log("api error : ",i)}function process_api(e,r,i,t){if(console.log("api : "+i,t),"get_device_info"==i)r.send({result:"success",device_id:my.config.device_id,device_name:my.config.device_name});else if("download_data"==i){var n=null,o=[],a=function(e=0){var r=PATH.join(my.config.tmp_dir,my.create_random_string(10)+".zip");return check_exist(r).then((i=>i?e>10?(my.log("warn","fn_gen_tmp_file_path : too many attemp : "+r),Promise.reject()):a(e+1):Promise.resolve(r)))};a().then((e=>(n=e,fs.promises.readdir(my.config.result_dir)))).then((e=>0==(o=e).length?(my.log("info","download_data : no result file"),r.status(204).send("No result file"),Promise.resolve()):new Promise(((e,r)=>{var i=fs.createWriteStream(n),t=archiver("zip");t.on("error",(function(e){r(e)})),t.pipe(i),o.forEach((e=>{t.file(PATH.join(my.config.result_dir,e),{name:e})})),i.on("close",(function(){e()})),t.finalize()})).then((()=>new Promise(((e,i)=>{r.download(n,"results.zip",(r=>{if(r)return my.log("warn",r),void i();my.log("info","download_data : file sent"),my.del(n,!1),e()}))})))))).catch((e=>{try{my.log("warn",e),n&&my.del(n,!1),r.status(500).send({result:"fail",msg:"string"==typeof e?e:"Unexpected error"})}catch(e){my.log("warn",e)}}))}else api_error(e,r,"invalid api : "+i)}function extract_zip(e,r,i=0){var t=PATH.join(my.config.tmp_dir,my.create_random_string(12));return check_exist(t).then((n=>n?i<10?resolve(extract_zip(e,r,i+1)):(my.log("error","extract_zip : too many attemp : src = "+e+", dst = "+r),reject()):extract(e,{dir:t}))).then((()=>fs.promises.readdir(t))).then((e=>Promise.resolve({dir:t,files:e.map((e=>PATH.join(t,e)))}))).catch((e=>(my.del(t,!1),Promise.reject(e))))}function check_exist(e){return fs.promises.access(e,fs.constants.F_OK).then((()=>Promise.resolve(!0))).catch((e=>"ENOENT"===e.code?Promise.resolve(!1):Promise.reject(e)))}require.main===module&&init();